using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;



namespace DvtkHighLevelInterface.UserInterfaces
{
	/// <summary>
	/// The actual .Net form that is displayed by the HLIForm class.
	/// This form knows little about HLI. The HLI logic is implemented
	/// by the HLIForm class.
	/// 
	/// The form contains two tabs:
	/// - Activity logging tab.
	/// - Instructions tab.
	/// </summary>
	internal class HliInternalForm : System.Windows.Forms.Form
	{
		//
		// - Generated by Visual Studio -
		//

		private System.Windows.Forms.Button buttonStop;
		private System.Windows.Forms.TabPage tabPageActivityLogging;
		private System.Windows.Forms.TabPage tabPageInteraction;
		private DvtkHighLevelInterface.UserInterfaces.UserControlActivityLogging userControlActivityLogging;
		private DvtkHighLevelInterface.UserInterfaces.UserControlInstructions userControlInstructions;
		private System.Windows.Forms.TabControl tabControl;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.tabControl = new System.Windows.Forms.TabControl();
			this.tabPageActivityLogging = new System.Windows.Forms.TabPage();
			this.userControlActivityLogging = new DvtkHighLevelInterface.UserInterfaces.UserControlActivityLogging();
			this.tabPageInteraction = new System.Windows.Forms.TabPage();
			this.userControlInstructions = new DvtkHighLevelInterface.UserInterfaces.UserControlInstructions();
			this.buttonStop = new System.Windows.Forms.Button();
			this.tabControl.SuspendLayout();
			this.tabPageActivityLogging.SuspendLayout();
			this.tabPageInteraction.SuspendLayout();
			this.SuspendLayout();
			// 
			// tabControl
			// 
			this.tabControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
				| System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right)));
			this.tabControl.Controls.Add(this.tabPageActivityLogging);
			this.tabControl.Controls.Add(this.tabPageInteraction);
			this.tabControl.Location = new System.Drawing.Point(8, 8);
			this.tabControl.Name = "tabControl";
			this.tabControl.SelectedIndex = 0;
			this.tabControl.Size = new System.Drawing.Size(736, 368);
			this.tabControl.TabIndex = 0;
			// 
			// tabPageActivityLogging
			// 
			this.tabPageActivityLogging.Controls.Add(this.userControlActivityLogging);
			this.tabPageActivityLogging.Location = new System.Drawing.Point(4, 22);
			this.tabPageActivityLogging.Name = "tabPageActivityLogging";
			this.tabPageActivityLogging.Size = new System.Drawing.Size(728, 342);
			this.tabPageActivityLogging.TabIndex = 0;
			this.tabPageActivityLogging.Text = "Activity Logging";
			// 
			// userControlActivityLogging
			// 
			this.userControlActivityLogging.Dock = System.Windows.Forms.DockStyle.Fill;
			this.userControlActivityLogging.Location = new System.Drawing.Point(0, 0);
			this.userControlActivityLogging.Name = "userControlActivityLogging";
			this.userControlActivityLogging.Size = new System.Drawing.Size(728, 342);
			this.userControlActivityLogging.TabIndex = 0;
			// 
			// tabPageInteraction
			// 
			this.tabPageInteraction.Controls.Add(this.userControlInstructions);
			this.tabPageInteraction.Location = new System.Drawing.Point(4, 22);
			this.tabPageInteraction.Name = "tabPageInteraction";
			this.tabPageInteraction.Size = new System.Drawing.Size(728, 342);
			this.tabPageInteraction.TabIndex = 1;
			this.tabPageInteraction.Text = "Instructions";
			// 
			// userControlInstructions
			// 
			this.userControlInstructions.Dock = System.Windows.Forms.DockStyle.Fill;
			this.userControlInstructions.Location = new System.Drawing.Point(0, 0);
			this.userControlInstructions.Name = "userControlInstructions";
			this.userControlInstructions.Size = new System.Drawing.Size(728, 342);
			this.userControlInstructions.TabIndex = 0;
			// 
			// buttonStop
			// 
			this.buttonStop.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonStop.Location = new System.Drawing.Point(672, 384);
			this.buttonStop.Name = "buttonStop";
			this.buttonStop.TabIndex = 1;
			this.buttonStop.Text = "Stop";
			this.buttonStop.Click += new System.EventHandler(this.buttonStop_Click);
			// 
			// HliInternalForm
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(752, 414);
			this.ControlBox = false;
			this.Controls.Add(this.buttonStop);
			this.Controls.Add(this.tabControl);
			this.Name = "HliInternalForm";
			this.Text = "HliInternalForm";
			this.tabControl.ResumeLayout(false);
			this.tabPageActivityLogging.ResumeLayout(false);
			this.tabPageInteraction.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion



		//
		// - Fields -
		//

		/// <summary>
		///  See property CloseHandler.
		/// </summary>
		private CloseDelegate closeHandler = null;

		/// <summary>
		/// The HliForm instance that uses this object.
		/// </summary>
		private HliForm hliForm = null;

		/// <summary>
		/// See property IsAvailable.
		/// </summary>
		private bool isAvailable = false;

		/// <summary>
		///  See property SetStopButtonTextHandler.
		/// </summary>
		private	SetStopButtonTextDelegate setStopButtonTextHandler = null;

		/// <summary>
		/// See property SetTextHandler.
		/// </summary>
		private SetTextDelegate setTextHandler = null;

		/// <summary>
		///  See property ShowAndContinueHandler.
		/// </summary>
		private ShowAndContinueDelegate showAndContinueHandler;



		//
		// - Constructors -
		//

		/// <summary>
		/// Default constructor, must not be used, therefore made private.
		/// </summary>
		private HliInternalForm()
		{

		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="hliForm">The HLIForm instance that uses this internal form.</param>
		public HliInternalForm(HliForm hliForm)
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			this.hliForm = hliForm;

			// Create the handlers used by other threads in an Invoke call.
			this.closeHandler = new CloseDelegate(HandleClose);
			this.showAndContinueHandler = new ShowAndContinueDelegate(HandleShowAndContinue);
			this.setStopButtonTextHandler = new SetStopButtonTextDelegate(HandleSetStopButtonText);
			this.setTextHandler = new SetTextDelegate(HandleSetText);

			lock(hliForm.LockObject)
			{
				this.isAvailable = true;
			}
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if(components != null)
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}



		//
		// - Delegates -
		//

		/// <summary>
		/// Delegate for the HandleClose method.
		/// </summary>
		public delegate void CloseDelegate();

		/// <summary>
		///  Delegate for the HandleSetStopButtonText method.
		/// </summary>
		public delegate void SetStopButtonTextDelegate(String text);

		/// <summary>
		///  Delegate for the HandleSetText method.
		/// </summary>
		public delegate void SetTextDelegate(String text);

		/// <summary>
		///  Delegate for the HandleShowAndContinue method.
		/// </summary>
		public delegate void ShowAndContinueDelegate(Thread thread, String text);



		//
		// - Properties -
		//

		/// <summary>
		/// Get the activity logging control.
		/// </summary>
		public DvtkHighLevelInterface.UserInterfaces.UserControlActivityLogging ActivityLoggingControl
		{
			get
			{
				return(this.userControlActivityLogging);
			}
		}

		/// <summary>
		/// Use the Control.Invoke method when accessing a control from another thread then the thread
		/// in which the control is created. 
		/// 
		/// Using this handler in combination with the Invoke method closes the form.
		/// </summary>
		public CloseDelegate CloseHandler 
		{
			get
			{
				return(this.closeHandler);
			}
		}

		/// <summary>
		/// Indicates if this internal form is available, more concrete,
		/// if an Invoke may be called on this object.
		/// </summary>
		public bool IsAvailable
		{
			get
			{
				return(this.isAvailable);
			}
		}

		/// <summary>
		/// Use the Control.Invoke method when accessing a control from another thread then the thread
		/// in which the control is created. 
		/// 
		/// Using this handler in combination with the Invoke method changes the text displayed on the 
		/// Stop button.
		/// </summary>
		public SetStopButtonTextDelegate SetStopButtonTextHandler
		{
			get
			{
				return(this.setStopButtonTextHandler);
			}
		}

		/// <summary>
		/// Use the Control.Invoke method when accessing a control from another thread then the thread
		/// in which the control is created. 
		/// 
		/// Using this handler in combination with the Invoke method changes the text displayed in the 
		/// caption of the form.
		/// </summary>
		public SetTextDelegate SetTextHandler
		{
			get
			{
				return(this.setTextHandler);
			}
		}

		/// <summary>
		/// Use the Control.Invoke method when accessing a control from another thread then the thread
		/// in which the control is created. 
		/// 
		/// Using this handler in combination with the Invoke method shows an instruction
		/// (when the supplied text is non-empty) or removes an instruction (when the supplied text is
		/// empty) for a specific Thread.
		/// </summary>
		public ShowAndContinueDelegate ShowAndContinueHandler
		{
			get
			{
				return(this.showAndContinueHandler);
			}
		}



		//
		// - Methods -
		//

		/// <summary>
		/// Method is called when the Stop button is pressed.
		/// 
		/// When attached Threads are still running, these Threads are stopped.
		/// When no attached Threads are running, the form is closed.
		/// </summary>
		/// <param name="sender">The sender.</param>
		/// <param name="e">The event arguments.</param>
		private void buttonStop_Click(object sender, System.EventArgs e)
		{
			bool areAllThreadsStopped = true;

			lock(this.hliForm.LockObject)
			{
				foreach(Thread attachedThread in this.hliForm.AttachedThreads)
				{
					if ((attachedThread.ThreadState == ThreadState.UnStarted) || (attachedThread.ThreadState == ThreadState.Running))
					{
						attachedThread.WriteWarningInternal("Stop button pressed.");
						attachedThread.Stop();
						areAllThreadsStopped = false;
					}
				}
			}

			if ((this.buttonStop.Text == "Exit") || areAllThreadsStopped)
			{
				Close();

				lock(hliForm.LockObject)
				{
					this.isAvailable = false;
				}
			}
			else
			{
				this.buttonStop.Text = "Stopping"; 
			}
		}

		/// <summary>
		/// Close the form.
		/// </summary>
		private void HandleClose()
		{
			lock(hliForm.LockObject)
			{
				this.isAvailable = false;
			}

			Close();
		}

		/// <summary>
		/// Change the text displayed in the caption of the form.
		/// </summary>
		/// <param name="text">The text to display.</param>
		private void HandleSetText(String text)
		{
			this.Text = text;
		}

		/// <summary>
		/// Change the text displayed on the Stop button.
		/// </summary>
		/// <param name="text"></param>
		private void HandleSetStopButtonText(String text)
		{
			this.buttonStop.Text = text;
		}

		/// <summary>
		/// Show an instruction (when the supplied text is non-empty) or remove an instruction 
		/// (when the supplied text is empty) for a specific Thread.
		/// </summary>
		/// <param name="thread">The Thread to show or remove the instruction for.</param>
		/// <param name="text">The text to display.</param>
		private void HandleShowAndContinue(Thread thread, String text)
		{
			this.userControlInstructions.SetInstruction(thread, text);

			if (text.Length == 0)
			{
				if (!this.userControlInstructions.ContainsInstructions)
				{
					this.tabControl.SelectedTab = this.tabPageActivityLogging;
				}
			}
			else
			{				
				this.tabControl.SelectedTab = this.tabPageInteraction;
			}
		}
	}
}
